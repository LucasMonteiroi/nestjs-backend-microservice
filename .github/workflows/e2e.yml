name: E2E test

on: [push]

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: nestjs
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - uses: bahmutov/npm-install@v1
        with:
            useLockFile: false
      - name: Run E2E tests
        run: |
          cp .env.example .env
          npm run build
          npm run test:e2e
        env:
          CI: 'true'
          PORT: 3000
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: nestjs
          DATABASE_URL: postgres://user:password@localhost:${{ job.services.postgres.ports[5432] }}/nestjs
  run-server:
      runs-on: ubuntu-latest
      services:
        postgres:
          image: postgres:12
          env:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: wnbaohW7mn
            POSTGRES_DB: authentication
          ports:
          - 5432:5432
          # needed because the postgres container does not provide a healthcheck
          options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - uses: bahmutov/npm-install@v1
        with:
            useLockFile: false
      - name: Prepare the database
        run: |
          npm run build
        env:
          PORT: 3000
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: wnbaohW7mn
          POSTGRES_DB: authentication
          DATABASE_URL: postgres://admin:wnbaohW7mn@localhost:${{ job.services.postgres.ports[5432] }}/authentication
      - name: Run the backend
        run: npm start &
        env:
          PORT: 3000
          NODE_ENV: production
          DATABASE_URL: postgres://admin:wnbaohW7mn@localhost:${{ job.services.postgres.ports[5432] }}/authentication
      - name: Run Postman collection
        run: npx newman run https://api.getpostman.com/collections/${{ secrets.COLLECTION_KEY}}?apikey=${{ secrets.POSTMAN_API_KEY}} --environment https://api.getpostman.com/environments/${{ secrets.POSTMAN_ENV_KEY}}?apikey=${{ secrets.POSTMAN_API_KEY}}
